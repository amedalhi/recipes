---
const themes = ["light", "dark"];
const theme = Astro.cookies.get("theme")?.value ?? themes[0];
---

<div class="theme-toggle">
  <input
    type="radio"
    id="light-mode"
    name="theme"
    value="light"
    checked={theme === "light"}
  />
  <label for="light-mode" class="theme-option">
    <svg
      class="theme-icon"
      width="16"
      height="16"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
    >
      <circle cx="12" cy="12" r="5"></circle>
      <path d="m12 1v2"></path>
      <path d="m12 21v2"></path>
      <path d="m4.22 4.22l1.42 1.42"></path>
      <path d="m18.36 18.36l1.42 1.42"></path>
      <path d="m1 12h2"></path>
      <path d="m21 12h2"></path>
      <path d="m4.22 19.78l1.42-1.42"></path>
      <path d="m18.36 5.64l1.42-1.42"></path>
    </svg>
  </label>

  <input
    type="radio"
    id="dark-mode"
    name="theme"
    value="dark"
    checked={theme === "dark"}
  />
  <label for="dark-mode" class="theme-option">
    <svg
      class="theme-icon"
      width="16"
      height="16"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
    >
      <path d="m12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z"></path>
    </svg>
  </label>

  <div class="toggle-slider"></div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const themes = ["light", "dark"];
    type Themes = (typeof themes)[number];
    const lightRadio = document.getElementById(
      "light-mode"
    ) as HTMLInputElement;
    const darkRadio = document.getElementById("dark-mode") as HTMLInputElement;

    function changeTheme(theme: Themes) {
      document.documentElement.setAttribute("data-theme", theme);
    }

    function saveTheme(theme: Themes) {
      const d = new Date();
      d.setTime(d.getTime() + 365 * 86400000);
      document.cookie = `theme=${theme};expires=${d.toUTCString()};path=/`;
    }

    function handleThemeChange(event: Event) {
      const target = event.target as HTMLInputElement;
      const theme = target.value as Themes;
      changeTheme(theme);
      saveTheme(theme);
    }

    // Add event listeners
    lightRadio?.addEventListener("change", handleThemeChange);
    darkRadio?.addEventListener("change", handleThemeChange);

    // Initialize theme from cookie
    const cookieTheme = document.cookie.match(/theme=([^;]+)/)?.[1];
    const initialTheme =
      typeof cookieTheme === "string" && themes.includes(cookieTheme)
        ? cookieTheme
        : themes[0];

    changeTheme(initialTheme);

    // Sync radio button states with initial theme
    if (initialTheme === "light") {
      lightRadio.checked = true;
    } else {
      darkRadio.checked = true;
    }
  });
</script>

<style>
  .theme-toggle {
    position: relative;
    display: inline-flex;
    background: #e5e7eb;
    border-radius: 50px;
    padding: 3px;
    font-size: 12px;
    font-weight: 600;
    user-select: none;
  }

  /* Dark mode container styling */
  .theme-toggle:has(#dark-mode:checked) {
    background: #2d2d2d;
  }

  .theme-toggle input[type="radio"] {
    display: none;
  }

  .theme-option {
    position: relative;
    display: flex;
    align-items: center;
    gap: 6px;
    padding: 6px 12px;
    border-radius: 46px;
    cursor: pointer;
    transition: all 0.3s ease;
    z-index: 2;
    color: #6b7280;
  }

  .theme-icon {
    width: 16px;
    height: 16px;
  }

  .toggle-slider {
    position: absolute;
    top: 4px;
    left: 4px;
    width: calc(50% - 4px);
    height: calc(100% - 8px);
    background: white;
    border-radius: 42px;
    transition: transform 0.3s ease;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  /* Active state styling using :has() for consistency */
  .theme-toggle:has(#light-mode:checked) .theme-option[for="light-mode"] {
    color: #3d3d3d;
  }

  .theme-toggle:has(#dark-mode:checked) .theme-option[for="dark-mode"] {
    color: white;
  }

  .theme-toggle:has(#dark-mode:checked) .toggle-slider {
    transform: translateX(100%);
    background: #3d3d3d;
  }

  /* Global theme-based styling */
  [data-theme="dark"] .theme-option {
    color: #9ca3af;
  }

  [data-theme="dark"]
    .theme-toggle:has(#light-mode:checked)
    .theme-option[for="light-mode"] {
    color: #f9fafb;
  }

  [data-theme="dark"]
    .theme-toggle:has(#dark-mode:checked)
    .theme-option[for="dark-mode"] {
    color: #f9fafb;
  }
</style>
