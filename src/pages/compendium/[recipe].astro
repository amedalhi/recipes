---
export const prerender = true;

import RecipeLayout from "@layouts/RecipeLayout.astro";

import { getCollection, render } from "astro:content";

export async function getStaticPaths() {
  const recipes = await getCollection("recipes", ({ data }) => !data.isDraft);

  return recipes.map((recipe) => {
    return {
      params: { recipe: recipe.data.slug },
      props: { recipe },
    };
  });
}

const { recipe } = Astro.props;
const { Content } = await render(recipe);
console.log(recipe.data.ingredients);
---

<RecipeLayout title={recipe.data.title}>
  <main class="wrapper-main margin-center">
    <section class="section-header">
      <div class="header-tags">
        {recipe.data.tags?.map((tag) => <span class="tags">{tag}</span>)}
      </div>
      <p class="recipe-description">{recipe.data.description}</p>
      <div class="header-title">
        <h1>{recipe.data.title}</h1>
      </div>
    </section>
    <section class="section-ingredients">
      <h2>Ingredients</h2>
      {
        recipe.data.ingredients?.map((ingredientGroup, groupIndex) => (
          <div class="ingredient-group">
            {/* Only show heading if title exists and isn't empty */}
            {ingredientGroup.title && ingredientGroup.title.trim() !== "" && (
              <h3 class="ingredient-group-title">{ingredientGroup.title}</h3>
            )}

            <ul class="ingredient-list">
              {ingredientGroup.items.map((item, index) => (
                <li class="ingredient-item">
                  <input
                    type="checkbox"
                    id={`ingredient-${groupIndex}-${index}`}
                    class="ingredient-checkbox"
                  />
                  <label
                    for={`ingredient-${groupIndex}-${index}`}
                    class="ingredient-label"
                  >
                    {/* All on same line: quantity unit name */}
                    {item.quantity && item.quantity.trim() !== "" && (
                      <span class="quantity">{item.quantity}</span>
                    )}
                    {item.unit && item.unit.trim() !== "" && (
                      <span class="unit">{item.unit}</span>
                    )}
                    <span class="name">{item.name}</span>
                  </label>
                </li>
              ))}
            </ul>
          </div>
        ))
      }
    </section>
    <section class="section-method">
      <h2>Method</h2>
      <Content />
    </section>
    {
      recipe.data.notes && recipe.data.notes.length > 0 && (
        <section>
          <h2>Notes</h2>
          <ul>
            {recipe.data.notes.map((note) => (
              <li>{note}</li>
            ))}
          </ul>
        </section>
      )
    }
    {
      recipe.data.source && (
        <section>
          <h2>Source</h2>
          <p>{recipe.data.source.text}</p>
          {recipe.data.source.originalSource && (
            <p>
              Original recipe:
              <a href={recipe.data.source.originalSource.url} target="_blank">
                {recipe.data.source.originalSource.name}
              </a>
            </p>
          )}
        </section>
      )
    }
  </main>
</RecipeLayout>

<style>
  .section-header {
    margin-bottom: -8px;
    padding: var(--space-s) var(--space-s) var(--space-s);
    background-color: #cdcdcd;

    display: flex;
    flex-direction: column;
  }

  .header-title {
    display: flex;
    flex-direction: column;

    margin: var(--space-xl) 0 var(--space-s);
  }

  h1 {
    font-size: var(--step-5);
    font-weight: 700;
    letter-spacing: -1.2px;
    line-height: 48px;
    color: var(--clr-black);
  }

  .recipe-description {
    font-size: var(--step-0);
    font-weight: 400;
    color: var(--clr-gray);
    margin-top: var(--space-2xs);
  }

  .header-tags {
    display: flex;
    flex-direction: row;
    align-items: flex-start;

    gap: var(--space-2xs);
  }

  .tags {
    font-size: var(--step--1);
    font-weight: 500;
    letter-spacing: 1px;

    background-color: var(--clr-orange);
    color: var(--clr-white);

    padding: var(--space-3xs) var(--space-s);
    border-radius: var(--radius-round);

    text-transform: uppercase;
  }

  h2 {
    font-size: var(--step-2);
    font-weight: 600;
    margin-bottom: var(--space-m);
    color: black;
  }

  .section-ingredients {
    border-top-left-radius: var(--radius-medium);
    border-top-right-radius: var(--radius-medium);
    background-color: var(--clr-secondary);

    padding: var(--space-l) var(--space-s) var(--space-l);

    margin-bottom: -8px;
  }

  .section-method {
    border-top-left-radius: var(--radius-medium);
    border-top-right-radius: var(--radius-medium);
    background-color: var(--clr-white);

    padding: var(--space-l) var(--space-s) var(--space-l);
  }

  .ingredient-group-title {
    margin: 0 0 0.75rem 0;
    font-size: 1.25rem;
    font-weight: 600;
    color: #374151;
    border-bottom: 2px solid #e5e7eb;
    padding-bottom: 0.25rem;
  }

  .ingredient-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .ingredient-item {
    padding: 0.5rem 0;
    border-bottom: 1px solid #f9fafb;
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .ingredient-item:last-child {
    border-bottom: none;
  }

  .ingredient-checkbox {
    width: 1.25rem;
    height: 1.25rem;
    cursor: pointer;
    accent-color: var(--clr-orange);
  }

  .ingredient-label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
    flex: 1;
    transition: all 0.2s ease;
  }

  /* Strikethrough when checked */
  .ingredient-checkbox:checked + .ingredient-label {
    text-decoration: line-through;
    opacity: 0.6;
    color: #9ca3af;
  }

  .ingredient-checkbox:checked + .ingredient-label .quantity,
  .ingredient-checkbox:checked + .ingredient-label .unit,
  .ingredient-checkbox:checked + .ingredient-label .name {
    color: #9ca3af;
  }

  .quantity {
    font-weight: 600;
    color: #1f2937;
    min-width: fit-content;
  }

  .unit {
    color: #6b7280;
    font-style: italic;
    min-width: fit-content;
  }

  .name {
    color: #111827;
    flex: 1;
  }

  /* Mobile-friendly touch targets */
  @media (max-width: 768px) {
    .ingredient-item {
      padding: 0.75rem 0;
      gap: 1rem;
    }

    .ingredient-checkbox {
      width: 1.5rem;
      height: 1.5rem;
    }

    .ingredient-label {
      font-size: 1.1rem;
      gap: 0.75rem;
    }
  }

  .tag {
    display: inline-block;
    background: #f3f4f6;
    padding: 0.25rem 0.5rem;
    border-radius: 0.375rem;
    font-size: 0.875rem;
    margin-right: 0.5rem;
    color: #6b7280;
  }
</style>
